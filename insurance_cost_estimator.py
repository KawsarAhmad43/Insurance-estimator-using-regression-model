# -*- coding: utf-8 -*-
"""Insurance Cost Estimator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwOP_4DBRDmqN9wJ6OzyrMb0zMSstcOQ
"""

import pandas as pd

data=pd.read_csv("/content/drive/MyDrive/dataset/insurance.csv")

# to get first 5 values of the dataset
data.head()

# to see the shape of a dataset
data.shape

print("The row count of the dataset {}".format(data.shape[0]))
print("The Col count of the dataset {}".format(data.shape[1]))

# to print the overall info
data.info()

# to observe total how many null value per col contains
data.isna().sum()

data.describe()

data.duplicated().sum()

data.drop_duplicates(inplace=True)

import matplotlib.pyplot as plt
import seaborn as sns

data.value_counts("sex")

sns.countplot(x="sex", data=data)
plt.show()

data.value_counts("smoker")

sns.countplot(x="smoker", data=data)
plt.show()

data.value_counts("region")

sns.countplot(x="region", data=data)
plt.show()

from sklearn import preprocessing
labelencoder= preprocessing.LabelEncoder()

data["smoker"]=labelencoder.fit_transform(data["smoker"])
data["sex"]=labelencoder.fit_transform(data["sex"])
data["region"]=labelencoder.fit_transform(data["region"])

data.head()

data.corr()["charges"].sort_values(ascending=False)

sns.heatmap(data.corr(),annot=True,cmap="rainbow")

for i in data.columns:
  sns.displot(data[i])
  plt.title(i+" "+"distribution")
  plt.show()

colorsforx= ["Red","Green","Yellow","Black","Blue","Grey"]
colorcharger=0

for i in data.columns[:-1]:
  sns.scatterplot(data=data, x=i, y="charges",color=colorsforx[colorcharger])
  plt.show()
  colorcharger +=1

x=data[["age","sex","bmi","children","smoker","region"]]
y= data[["charges"]]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.30)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_x_train= scaler.fit_transform(x_train)
scaled_x_test= scaler.fit_transform(x_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np
def modelresults(predictions):
  print("Mean absolute error on model is {}".format(mean_absolute_error(y_test,predictions)))
  print("Root mean squared error on model is {}".format(np.sqrt(mean_squared_error(y_test,predictions))))

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(scaled_x_train,y_train)

predslr=lr.predict(scaled_x_test)
modelresults(predslr)

from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
svrmodel= SVR()
param_gridsvr= {'C':[0.001,0.01,0.1,0.5,1],'kernel':['linear','rbf','poly'],'gamma':['scale','auto'],'degree':[2,3,4,5]}
gridsvr= GridSearchCV(svrmodel,param_gridsvr)
gridsvr.fit(scaled_x_train,y_train)

print("Best Parameters for model is {}".format(gridsvr.best_params_))

predsgridsvr=gridsvr.predict(scaled_x_test)
modelresults(predsgridsvr)

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
rfrmodel= RandomForestRegressor()
param_gridrfr= {'bootstrap': [True], 'max_depth': [5,10,15],'max_features':['auto','log2'],'n_estimators':[2,3,4,5,6,7,8,9,10]}
gridrfr= GridSearchCV(rfrmodel,param_gridrfr)
gridrfr.fit(scaled_x_train,y_train)

predsgridrfr=gridrfr.predict(scaled_x_test)
modelresults(predsgridrfr)

x.columns

columniterate =1
for index in x.columns:
  mean = data[index].mean()
  print("The mean of the column {} is {}".format(columniterate,mean))
  columniterate +=1

newcustomer= np.array([39,0,30,1,0,1])

gridrfr.predict(newcustomer.reshape(1,-1))

print('The Insurance cost of new customer is {}'.format(gridrfr.predict(newcustomer.reshape(1,-1))[0]))